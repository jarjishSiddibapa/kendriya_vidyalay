
CREATE TABLE students (
  student_id SERIAL PRIMARY KEY,
  name VARCHAR NOT NULL,
  mobile_number VARCHAR NOT NULL UNIQUE,
  dob DATE NOT NULL,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE student_profiles (
  profile_id SERIAL PRIMARY KEY,
  city VARCHAR NOT NULL,
  email VARCHAR NOT NULL UNIQUE,
  guardian_number VARCHAR,
  blood_group VARCHAR NOT NULL CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
  student_id INT UNIQUE REFERENCES students(student_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE courses (
  course_id SERIAL PRIMARY KEY,
  course_name VARCHAR NOT NULL,
  course_fees NUMERIC NOT NULL,
  course_description VARCHAR,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE subjects (
  subject_id SERIAL PRIMARY KEY,
  subject_name VARCHAR NOT NULL,
  course_id INT REFERENCES courses(course_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE course_subject_map (
  course_id INT REFERENCES courses(course_id) ON DELETE CASCADE,
  subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE student_course_map (
  student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
  course_id INT REFERENCES courses(course_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE teachers (
  teacher_id SERIAL PRIMARY KEY,
  name VARCHAR NOT NULL,
  mobile_number VARCHAR NOT NULL UNIQUE,
  dob DATE NOT NULL,
  salary DECIMAL NOT NULL,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE teacher_profiles (
  profile_id SERIAL PRIMARY KEY,
  city VARCHAR NOT NULL,
  email VARCHAR NOT NULL UNIQUE,
  alternate_number VARCHAR,
  blood_group VARCHAR NOT NULL CHECK (blood_group IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
  teacher_id INT UNIQUE REFERENCES teachers(teacher_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE teacher_subject_map (
  teacher_id INT REFERENCES teachers(teacher_id) ON DELETE CASCADE,
  subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE tests (
  test_id SERIAL PRIMARY KEY,
  subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
  test_date DATE,
  test_type VARCHAR,
  max_marks INT,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE test_student_map (
  test_id INT REFERENCES tests(test_id) ON DELETE CASCADE,
  student_id INT REFERENCES students(student_id) ON DELETE CASCADE,
  marks NUMERIC CHECK (marks >= 0),
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE teacher_course_subject_map (
  teacher_id INT REFERENCES teachers(teacher_id) ON DELETE CASCADE,
  course_id INT REFERENCES courses(course_id) ON DELETE CASCADE,
  subject_id INT REFERENCES subjects(subject_id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- STUDENTS
INSERT INTO students (name, mobile_number, dob) VALUES
('Amit Sharma', '9991110001', '2002-03-15'),
('Sneha Rao', '9991110002', '2001-07-22'),
('Ravi Kumar', '9991110003', '2002-11-03'),
('Pooja Singh', '9991110004', '2003-01-30'),
('Arjun Mehta', '9991110005', '2001-09-18');

-- STUDENT PROFILES
INSERT INTO student_profiles (city, email, guardian_number, blood_group, student_id) VALUES
('Delhi', 'amit.sharma@email.com', '9876543210', 'A+', 1),
('Mumbai', 'sneha.rao@email.com', '9876543211', 'B+', 2),
('Bangalore', 'ravi.kumar@email.com', '9876543212', 'O-', 3),
('Kolkata', 'pooja.singh@email.com', '9876543213', 'AB+', 4),
('Pune', 'arjun.mehta@email.com', '9876543214', 'A-', 5);

-- TEACHERS
INSERT INTO teachers (name, mobile_number, dob, salary) VALUES
('Dr. Rajiv Verma', '8881110001', '1980-06-10', 75000),
('Ms. Kavita Desai', '8881110002', '1985-12-22', 70000),
('Mr. Nikhil Bhatia', '8881110003', '1979-03-03', 80000);

-- TEACHER PROFILES
INSERT INTO teacher_profiles (city, email, alternate_number, blood_group, teacher_id) VALUES
('Delhi', 'rajiv.verma@engg.edu', '9000000001', 'O+', 1),
('Mumbai', 'kavita.desai@engg.edu', '9000000002', 'B-', 2),
('Chennai', 'nikhil.bhatia@engg.edu', '9000000003', 'AB-', 3);

-- COURSES
INSERT INTO courses (course_name, course_fees, course_description) VALUES
('Computer Engineering', 120000, 'Focus on software and systems'),
('Electrical Engineering', 110000, 'Focus on electrical systems'),
('Mechanical Engineering', 115000, 'Focus on mechanical systems'),
('AI & Data Science', 130000, 'Focus on AI and data analysis');

-- SUBJECTS
INSERT INTO subjects (subject_name, course_id) VALUES
('Data Structures', 1),
('Algorithms', 1),
('Computer Networks', 1),
('Digital Electronics', 2),
('Engineering Mathematics', 1),
('Thermodynamics', 3),
('Fluid Mechanics', 3),
('Control Systems', 2),
('Machine Learning', 4),
('Artificial Intelligence', 4);

-- STUDENT-COURSE MAP
INSERT INTO student_course_map (student_id, course_id) VALUES
(1, 1), (1, 2), (1, 4),  -- Amit
(2, 1), (2, 3), (2, 4),  -- Sneha
(3, 2), (3, 3), (3, 4),  -- Ravi
(4, 1), (4, 2), (4, 3),  -- Pooja
(5, 1), (5, 3), (5, 4);  -- Arjun

-- TEACHER-SUBJECT MAP
INSERT INTO teacher_subject_map (teacher_id, subject_id) VALUES
(1, 1), (1, 2), (1, 3), (1, 5),      -- Rajiv
(2, 4), (2, 5), (2, 6), (2, 7),      -- Kavita
(3, 8), (3, 9), (3, 10), (3, 1);     -- Nikhil

-- COURSE-SUBJECT MAP
INSERT INTO course_subject_map (subject_id, course_id) VALUES
(1, 1), (2, 1), (3, 1), (5, 1),      -- CE
(4, 2), (5, 2), (6, 2), (8, 2),      -- EE
(5, 3), (6, 3), (7, 3),             -- ME
(1, 4), (9, 4), (10, 4), (5, 4);     -- AI & DS

-- TEACHER-COURSE-SUBJECT MAP
INSERT INTO teacher_course_subject_map (teacher_id, course_id, subject_id, is_active) VALUES
(1, 1, 1, TRUE),  -- Rajiv - CE - Data Structures
(1, 1, 2, TRUE),
(1, 1, 3, TRUE),
(1, 1, 5, TRUE),

(2, 2, 4, TRUE),  -- Kavita - EE - Digital Electronics
(2, 2, 5, TRUE),
(2, 2, 6, TRUE),
(2, 3, 7, TRUE),

(3, 4, 1, TRUE),  -- Nikhil - AI - Data Structures
(3, 4, 9, TRUE),
(3, 4, 10, TRUE),
(3, 2, 8, FALSE);  -- Inactive teaching EE - Control Systems

-- TESTS
INSERT INTO tests (subject_id, test_date, test_type, max_marks) VALUES
(1, '2025-07-10', 'Midterm', 50),
(1, '2025-08-20', 'Final', 100),
(5, '2025-07-15', 'Quiz', 20),
(4, '2025-07-12', 'Lab Test', 30),
(9, '2025-07-22', 'Midterm', 50),
(10, '2025-07-25', 'Final', 100),
(6, '2025-07-18', 'Midterm', 50),
(7, '2025-08-01', 'Final', 100);

-- TEST-STUDENT MAP
INSERT INTO test_student_map (test_id, student_id, marks) VALUES
-- Data Structures Midterm
(1, 1, 42),
(1, 2, 47),
(1, 3, 38),
-- Data Structures Final
(2, 1, 91),
(2, 2, 87),
(2, 3, 76),
-- Engineering Math Quiz
(3, 1, 18),
(3, 4, 17),
(3, 5, 19),
-- Digital Electronics Lab
(4, 3, 25),
(4, 4, 28),
-- Machine Learning Midterm
(5, 1, 41),
(5, 5, 45),
-- AI Final
(6, 1, 95),
(6, 2, 88),
-- Thermodynamics Midterm
(7, 3, 46),
(7, 4, 44),
-- Fluid Mechanics Final
(8, 3, 92),
(8, 4, 88);



CREATE OR REPLACE FUNCTION get_subjects_by_course_id(p_course_id INT)
RETURNS TABLE (
    course_id INT,
    course_name VARCHAR,
    subject_id INT,
    subject_name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.course_id,
        c.course_name,
        s.subject_id,
        s.subject_name
    FROM 
        courses c
    JOIN 
        course_subject_map csm ON c.course_id = csm.course_id
    JOIN 
        subjects s ON csm.subject_id = s.subject_id
    WHERE 
        c.course_id = p_course_id
        AND c.is_active = TRUE
        AND s.is_active = TRUE
        AND csm.is_active = TRUE;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION get_teachers_by_subject_id(p_subject_id INT) 
RETURNS TABLE (
    teacher_id INT,
    teacher_name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        t.teacher_id,
        t.name AS teacher_name
    FROM 
        teacher_subject_map tsm
    JOIN 
        teachers t ON tsm.teacher_id = t.teacher_id
    WHERE 
        tsm.subject_id = p_subject_id
        AND tsm.is_active = TRUE
        AND t.is_active = TRUE;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_students_by_course_id(p_course_id INT)
RETURNS TABLE (
    course_id INT,
    course_name VARCHAR,
    student_id INT,
    name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        c.course_id,
        c.course_name,
        s.student_id,
        s.name
    FROM 
        courses c
    JOIN 
        student_course_map scm ON c.course_id = scm.course_id
    JOIN 
        students s ON scm.student_id = s.student_id
    WHERE 
        c.course_id = p_course_id
        AND c.is_active = TRUE
        AND s.is_active = TRUE
        AND scm.is_active = TRUE;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_subjects_and_teacher_by_course_id(p_course_id INT)
RETURNS TABLE (
    subject_id INT,
    subject_name VARCHAR,
    teacher_id INT,
    teacher_name VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        s.subject_id,
        s.subject_name,
        t.teacher_id,
        t.name AS teacher_name
    FROM 
        course_subject_map csm
    JOIN 
        subjects s ON s.subject_id = csm.subject_id
    LEFT JOIN 
        teacher_course_subject_map tcsm 
        ON csm.course_id = tcsm.course_id 
           AND csm.subject_id = tcsm.subject_id 
           AND tcsm.is_active = TRUE
    LEFT JOIN 
        teachers t ON t.teacher_id = tcsm.teacher_id AND t.is_active = TRUE
    WHERE 
        csm.course_id = p_course_id
        AND csm.is_active = TRUE
        AND s.is_active = TRUE;
END;
$$ LANGUAGE plpgsql;




-- fucntion for trigger

CREATE OR REPLACE FUNCTION soft_delete_subject_mappings()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE course_subject_map SET is_active = FALSE
  WHERE subject_id = OLD.subject_id;

  UPDATE teacher_subject_map SET is_active = FALSE
  WHERE subject_id = OLD.subject_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION soft_delete_course_mappings()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE course_subject_map SET is_active = FALSE
  WHERE course_id = OLD.course_id;

  UPDATE student_course_map SET is_active = FALSE
  WHERE course_id = OLD.course_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION soft_delete_student_mappings()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE student_course_map SET is_active = FALSE
  WHERE student_id = OLD.student_id;

  UPDATE test_student_map SET is_active = FALSE
  WHERE student_id = OLD.student_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION soft_delete_test_mappings()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE test_student_map SET is_active = FALSE
  WHERE test_id = OLD.test_id;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION soft_delete_teacher_assignments()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE teacher_course_subject_map
    SET is_active = FALSE
    WHERE teacher_id = OLD.teacher_id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;







-- trigger

-- Trigger for subjects
CREATE TRIGGER trg_soft_delete_subject_mappings
AFTER UPDATE ON subjects
FOR EACH ROW
WHEN (OLD.is_active = TRUE AND NEW.is_active = FALSE)
EXECUTE FUNCTION soft_delete_subject_mappings();

-- Trigger for courses
CREATE TRIGGER trg_soft_delete_course_mappings
AFTER UPDATE ON courses
FOR EACH ROW
WHEN (OLD.is_active = TRUE AND NEW.is_active = FALSE)
EXECUTE FUNCTION soft_delete_course_mappings();

-- Trigger for students
CREATE TRIGGER trg_soft_delete_student_mappings
AFTER UPDATE ON students
FOR EACH ROW
WHEN (OLD.is_active = TRUE AND NEW.is_active = FALSE)
EXECUTE FUNCTION soft_delete_student_mappings();

-- Trigger for tests
CREATE TRIGGER trg_soft_delete_test_mappings
AFTER UPDATE ON tests
FOR EACH ROW
WHEN (OLD.is_active = TRUE AND NEW.is_active = FALSE)
EXECUTE FUNCTION soft_delete_test_mappings();

-- Trigger for teachere delete then teacher_subject_course_map 
CREATE TRIGGER trg_soft_delete_teacher_assignments
BEFORE DELETE ON teachers
FOR EACH ROW
EXECUTE FUNCTION soft_delete_teacher_assignments();





